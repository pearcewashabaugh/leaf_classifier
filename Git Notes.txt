A Github Refresher
	- Quotes are taken from official gitub tutorials such as https://try.github.io or from the documentation found on their website.


.ssh private key stored at     ~\Diagoras\.ssh\id_rsa        and the public key is stored at     ~\Diagoras\.ssh\id_rsa.pub


Default user name and email: 
	git config --global user.name "Matt Krupa"
	git config --global user.email "mgkrupa@gmail.com"

Lists current git settings:
	git config --list
	In windows, you may have to create a new user (not system) environmental variable called   EDITOR    with value:    notepad    to be able to simply type:    git commit     
		-To get there, Go to "Control panel -> System and Security -> System" and then on the LHS select "Advanced system settings". Go the the "Advanced" tab and near the bottom select "Environment Variables".

Help pages: 
	git <verb> --help     or    git help <verb>  	EX: git help config
	man git-<verb> 

Starting up repositories:
	To create a new git repository for an existing directory go to the directory and type "git init".
		-This will NOT automatically add the files contained in this directory to this new repository.
		-To add files in this directory to the new git repository you must use (possibly multiple) "git add myFile" commands followed by    git commit -m 'new project version name'
	To get a copy of an existing remote repository use "git clone https://github.com/libgit2/libgit2"
		-Git will receive a full copy of nearly all data that the server has (including every version of every file for the history of the project by default)
		-This will create a directory named "libgit2" and initializes a .git directoy inside it, pulls down all the data for the reposirypry and checks out a working copy.
		-To have the copy be named something other than "libgit2" type the desired name at the end. Ex: "git clone https://github.com/libgit2/libgit2 myDirectoryName"
		-"The previous example uses the https:// protocol, but you may also see git:// or user@server:path/to/repo.git, which uses the SSH transfer protocol"
		-"When you first clone a repository, all of your files will be tracked and unmodified because you just checked them out and haven’t edited anything."
	To make the git software aware of a remove repositary (say stored at https://github.com/try-git/try_git.git) then use
		git remote add origin https://github.com/try-git/try_git.git
		- Note that the above command named this repository "origin" instead of "myMainRepoName" since 
			"Git doesn't care what you name your remotes, but it's typical to name your main one origin" -https://try.github.io/levels/1/challenges/10
		- Example of when "git remote add" is more useful than using the "git clone": 
			If the remote repository is empty and you want to then push your master branch to this repo. (done via the command: git push -u origin master )

Ignoring Files:
	To ignore files, create a text file called ".gitignore"
		-Including the line:      *.[oa]     would tell "Git to ignore any files ending in “.o” or “.a” – object and archive files that may be the product of building your code." 
		-While inserting the line:  *~    would tell " Git to ignore all files that end with a tilde (~), which is used by many text editors such as Emacs to mark temporary files."
	Rules for .gitignore files is: (Quotes:)
		-Blank lines or lines starting with # are ignored.
		-Standard glob patterns work. (Glob patterns are like simplified regular expressions that shells use.)
		-You can end patterns with a forward slash (/) to specify a directory.
		-You can negate a pattern by starting it with an exclamation point (!).


Recording changes to a repository (Chapter 2.2)
	"You need to make some changes and commit snapshots of those changes into your repository each time the project reaches a state you want to record."
	"Remember that each file in your working directory can be in one of two states: tracked or untracked. 
		Tracked files are files that were in the last snapshot; they can be unmodified, modified, or staged. Untracked files are everything else"
	"As you edit files, Git sees them as modified, because you’ve changed them since your last commit. You stage these modified files and then commit all your staged changes, and the cycle repeats."

Status of files:
	"git status" is the command used to check the status of any file.
	Untracked Files:
		-If you create a new file in the project's repository it will immediately be recognized by git as an "untracked file"
		-"Untracked basically means that Git sees a file you didn’t have in the previous snapshot (commit); 
			Git won’t start including it in your commit snapshots until you explicitly tell it to do so. It does this so you don’t accidentally begin including generated binary files or other files that you did not mean to include."
	Tracking New Files:
		-Use "git add myFile" to start tracking myFile
			-"If you commit at this point, the version of the file at the time you ran git add is what will be in the historical snapshot."
		-"The git add command takes a path name for either a file or a directory; if it’s a directory, the command adds all the files in that directory recursively."

HEAD pointer:
	"How does Git know what branch you’re currently on? It keeps a special pointer called HEAD ...  In Git, this is a pointer to the local branch you’re currently on."
	"The HEAD is a pointer that holds your position within all your different commits. 
		By default HEAD points to your most recent commit, so it can be used as a quick way to reference that commit without having to look up the SHA." -https://try.github.io/levels/1/challenges/13
		- In particular, if you pull from the remote repo. called "origin" (say via the command "git pull origin master") and someone has changed some files 
			then HEAD will point to your local repo.'s state (i.e. branch) as it was when YOU made your last commits and NOT to the just pulled branch, (which is master?).

Staging Files (i.e. git add):
	If a tracked file has been changed then this change will NOT be included in the new snapshot.
	To have the most recent changes included in the next snapshot you must stage the file.
	"git add" is used to stage a (tracked or untracked) file. 
		-"It may be helpful to think of it more as “add this content to the next commit” rather than “add this file to the project”."
		-IMO The 'git add' command probably should have been instead named 'git stage' (or maybe even better, name it 'git ready'). 
	"Adding the -a option to the git commit command makes Git automatically stage every file that is already tracked before doing the commit, letting you skip the git add part:" 
		- EX: git commit -a -m 'added new benchmarks'

Prototypical new file process: Suppose that a file, say myNewFile.txt, suddenly appears into your local git repo. folder (say you copied it there from somewhere else) then 
	(1) myNewFile.txt will be untracked 
	(2) to track myNewFile.txt run   git add myNewFile.txt 
		-IMPORTANT: Note that myNewFile.txt is NOT yet a part of your repository (See example at https://try.github.io/levels/1/challenges/6 )
	(3) To make myNewFile.txt a part of your local repository you must commit it (and all other pending commits) by running: git commit -m "My Description of This Commit"
	(4) Assuming that you were doing all this in your master branch and that you have a remote repo. then you'll have to upload the new file to the remote repo. by running: git push
		- If you were not on your master branch then you will have to merge the branch that you were working on into your master branch. 

Unstaging files (i.e. git reset)
	EX: git reset myFile.txt

git rm (Remove files and folders)
	Will (1) "remove the actual files from disk" and
	     (2) "also stage the removal of the files for us." -https://try.github.io/levels/1/challenges/20
	EX: git rm '*.txt'  will remove all files with names ending with the .txt extension in both the current folder and all subfolders.
	To (recursively) remove the contents of a folder (and the folder itself?) type:  git rm -r myFolderName
	-a flag: "If you happen to delete a file without using 'git rm' you'll find that you still have to 'git rm' the deleted files from the working tree. 
		You can save this step by using the '-a' option on 'git commit', which auto removes deleted files with the commit." -https://try.github.io/levels/1/challenges/21
		EX: git commit -am "My comment"

Committing (i.e. git commit):
	"git commit" commites changes
	git commit -m "my list of changes" will give a list of changes, where in Linux use 'my list of changes' instead of "my list of changes".
	"For an even more explicit reminder of what you’ve modified, you can pass the -v option to git commit. Doing so also puts the diff of your change in the editor so you can see exactly what changes you’re committing."
	"Remember that the commit records the snapshot you set up in your staging area. Anything you didn’t stage is still sitting there modified; you can do another commit to add it to your history. Every time you perform a commit, you’re recording a snapshot of your project that you can revert to or compare to later."
	"Adding the -a option to the git commit command makes Git automatically stage every file that is already tracked before doing the commit, letting you skip the git add part:"
		-EX: git commit -a -m "added new benchmarks"

git fetch
	"The command goes out to that remote project and pulls down all the data from that remote project that you don’t have yet. 
		After you do this, you should have references to all the branches from that remote, which you can merge in or inspect at any time."
	"It’s important to note that the git fetch command pulls the data to your local repository – 
		it doesn’t automatically merge it with any of your work or modify what you’re currently working on. You have to merge it manually into your work when you’re ready."
	"If you have a branch set up to track a remote branch (see the next section and Chapter 3 for more information), you can use the git pull command to automatically fetch and then merge a remote branch into your current branch. This may be an easier or more comfortable workflow for you; and 
		by default, the git clone command automatically sets up your local master branch to track the remote master branch (or whatever the default branch is called) on the server you cloned from. 
		Running git pull generally fetches data from the server you originally cloned from and automatically tries to merge it into the code you’re currently working on."

git push
	"This command works only if you cloned from a server to which you have write access and if nobody has pushed in the meantime. 
		If you and someone else clone at the same time and they push upstream and then you push upstream, your push will rightly be rejected. 
		You’ll have to pull down their work first and incorporate it into yours before you’ll be allowed to push."

git pull
	"Incorporates changes from a remote repository into the current branch. 
		In its default mode, git pull is shorthand for git fetch followed by git merge FETCH_HEAD .
		More precisely, git pull runs git fetch with the given parameters and calls git merge to merge the retrieved branch heads into the current branch. 
		With --rebase, it runs git rebase instead of git merge." -https://git-scm.com/docs/git-pull
	EX: git pull origin master   will "check for changes on our GitHub repository [called origin] and pull down any new changes by running" to your master branch. -https://try.github.io/levels/1/challenges/12
	"A pull request allows the boss of the project to look through your changes and make comments before deciding to merge in the change." -https://try.github.io/levels/1/challenges/22


Branches Info.:
	"When developers are working on a feature or bug they'll often create a copy (aka. branch) of their code they can make separate commits to. 
		Then when they're done they can merge this branch back into their main master branch." -https://try.github.io/levels/1/challenges/18
	"How does Git know what branch you’re currently on? It keeps a special pointer called HEAD ...  In Git, this is a pointer to the local branch you’re currently on."
	"Switching branches changes files in your working directory"
		-"It’s important to note that when you switch branches in Git, files in your working directory will change. 
			If you switch to an older branch, your working directory will be reverted to look like it did the last time you committed on that branch. 
			If Git cannot do it cleanly, it will not let you switch at all."

Creating branches: To create a new branch ... 
	without then immediately switching to it:	git branch myBranchName     
	and then immediately switching to it: 		git checkout -b myBranchName

Deleting a branch: git branch -d myBranchName

git checkout (Switching Branches)
	Can also be used to revert commits. "Files can be changed back to how they were at the last commit by using the command: git checkout -- <target>." -https://try.github.io/levels/1/challenges/17
	EX: "[To] get rid of all the changes since the last commit for" myFile.txt use: git checkout -- myFile.txt
		- Note the space between --  and   myFile.txt
	To simultaneously create a branch and check it out use -b:
		-EX: git checkout -b myBranchName
		-The above command is the same as typing: git branch myBranchName   followed by typing: git checkout myBranchName


git branch (Create/delete a new branch but don't switch to it OR if no branch name is given then it shows your current branch)
	git branch myBranchName     "This creates a new pointer at the same commit you’re currently on."
	"The git branch command only created a new branch – it didn’t switch to that branch."
		-"To switch to an existing branch, you run the git checkout command. ... This moves HEAD to point to the testing branch."
		-EX: to switch to the new branch myBranchName type:	git checkout myBranchName 
	Simply typing: "git branch" withOUT any branch name at the end displays the name of your current branch.
	git branch -d myBranchName    will delete the branch myBranchName



Information:

git status
	"git status" is the command used to check the status of any file.
	Use   -s   or  --short   to get a less comprehensive status output.
		-"New files that aren’t tracked have a ?? next to them, new files that have been added to the staging area have an A, modified files have an M and so on."


git diff
	If (1) someone has updated the repository you've been working on and (2) you pull this altered repository then you can check how it differs from your current HEAD branch (i.e. current branch) via:
		- git diff HEAD
	Using --staged allows this command to be used on uncommitted files that are staged. https://try.github.io/levels/1/challenges/14
		-EX: To compare the unstaged file myFile.txt first stage the file via:  git add myFile.txt   and then type:  git diff -staged

Misc: 
	To edit a text file in windows 64-bit type "notepad myFile.txt"
		-For 32-bit versions of windows you can also use "edit myFile.txt", but not for 64-bit versions.
	The double dash:  --
		-"It's simply promising the command line that there are no more options after the '--'. This way if you happen to have a branch named" myFile.txt then the command git checkout -- myFile.txt "will still revert the file, instead of switching to the branch of the same name."
		-"This option can be used to separate command-line options from the list of files, (useful when filenames might be mistaken for command-line options)." -https://git-scm.com/docs/git-rm
